{"ast":null,"code":"import { connect } from \"react-redux\";\nimport Main from \"../components/MainPage/Main\";\n\nconst mapDispatchToProps = dispatch => ({\n  selectTask(selectedTask) {\n    dispatch({\n      type: 'ADD_SELECTED_TASK',\n      selectedTask\n    });\n  },\n\n  selectUser(selectedUser) {\n    dispatch({\n      type: 'ADD_SELECTED_USER',\n      selectedUser\n    });\n  },\n\n  selectCost(selectedCost) {\n    dispatch({\n      type: 'ADD_SELECTED_COST',\n      selectedCost\n    });\n  },\n\n  costMethod(costMethod) {\n    dispatch({\n      type: 'ADD_SELECTED_COST_METHOD',\n      costMethod\n    });\n  },\n\n  addTaskToUser(currentUser, newTask) {\n    dispatch(() => {\n      fetch(\"http://localhost:3000/api/users/\".concat(currentUser._id, \"/task\"), {\n        method: 'PUT',\n        body: JSON.stringify(newTask),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(() => {\n        this.getNewData();\n      });\n    });\n  },\n\n  addKarmaToUser(user, newKarma, currentUser) {\n    let karma = {\n      karma: newKarma\n    };\n    dispatch(() => {\n      fetch(\"http://localhost:3000/api/users/\".concat(user._id, \"/karma\"), {\n        method: 'PUT',\n        body: JSON.stringify(karma),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(this.getNewData(currentUser));\n    });\n  },\n\n  createNewTask(taskName) {\n    let newTask = {\n      task: taskName,\n      value: 5\n    };\n    dispatch(() => {\n      fetch(\"http://localhost:3000/api/tasks\", {\n        method: 'POST',\n        body: JSON.stringify(newTask),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(this.getTasksData());\n    });\n  },\n\n  changeConfirm(confirm) {\n    dispatch({\n      type: 'CONFIRM_TASK',\n      confirm\n    });\n  },\n\n  getNewData(currentUser) {\n    dispatch(() => {\n      fetch('http://localhost:3000/api/users').then(res => {\n        return res.json().then(users => {\n          dispatch({\n            type: 'ADD_USERS',\n            users\n          });\n\n          if (currentUser) {\n            const groupUsers = users.filter(user => {\n              return user.groups[0].groupName === currentUser.groups[0].groupName;\n            });\n            dispatch({\n              type: 'SET_GROUP_USERS',\n              groupUsers\n            });\n          }\n        });\n      });\n    });\n  },\n\n  getTasksData() {\n    dispatch(() => {\n      fetch('http://localhost:3000/api/tasks').then(res => {\n        return res.json().then(tasks => {\n          dispatch({\n            type: 'ADD_TASKS',\n            tasks\n          });\n        });\n      });\n    });\n  }\n\n});\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    groupUsers: state.groupUsers,\n    tasks: state.tasks,\n    selected: state.selected,\n    currentUser: state.currentUser,\n    confirm: state.confirm\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);","map":{"version":3,"sources":["/Users/a9886177/Desktop/codeclan_work/week_09/project_iou/iou_app_frontend/src/containers/MainPageContainer.js"],"names":["connect","Main","mapDispatchToProps","dispatch","selectTask","selectedTask","type","selectUser","selectedUser","selectCost","selectedCost","costMethod","addTaskToUser","currentUser","newTask","fetch","_id","method","body","JSON","stringify","headers","then","getNewData","addKarmaToUser","user","newKarma","karma","response","json","createNewTask","taskName","task","value","getTasksData","changeConfirm","confirm","res","users","groupUsers","filter","groups","groupName","tasks","mapStateToProps","state","selected"],"mappings":"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","sourcesContent":["import { connect } from \"react-redux\";\nimport Main from \"../components/MainPage/Main\";\n\nconst mapDispatchToProps = dispatch => ({\n  selectTask(selectedTask) {\n    dispatch({\n      type: 'ADD_SELECTED_TASK',\n      selectedTask\n    })\n  },\n  selectUser(selectedUser) {\n    dispatch({\n      type: 'ADD_SELECTED_USER',\n      selectedUser\n    })\n  },\n  selectCost(selectedCost) {\n    dispatch({\n      type: 'ADD_SELECTED_COST',\n      selectedCost\n    })\n  },\n  costMethod(costMethod) {\n    dispatch({\n      type: 'ADD_SELECTED_COST_METHOD',\n      costMethod\n    })\n  },\n  addTaskToUser(currentUser, newTask) {\n    dispatch (() => {\n      fetch(`http://localhost:3000/api/users/${currentUser._id}/task`, {\n        method: 'PUT',\n        body: JSON.stringify(newTask),\n        headers: { 'Content-Type': 'application/json' }\n      })\n      .then(() => {this.getNewData()});\n    })\n  },\n  addKarmaToUser(user, newKarma, currentUser) {\n    let karma = {karma: newKarma}\n\n    dispatch (() => {\n      fetch(`http://localhost:3000/api/users/${user._id}/karma`, {\n        method: 'PUT',\n        body: JSON.stringify(karma),\n        headers: { 'Content-Type': 'application/json' }\n      })\n      .then((response) => response.json())\n      .then(this.getNewData(currentUser));\n    })\n  },\n  createNewTask(taskName) {\n    let newTask = {task: taskName, value: 5}\n    dispatch (() => {\n      fetch(`http://localhost:3000/api/tasks`, {\n        method: 'POST',\n        body: JSON.stringify(newTask),\n        headers: { 'Content-Type': 'application/json' }\n      })\n      .then((response) => response.json())\n      .then(this.getTasksData());\n    })\n  },\n  changeConfirm(confirm) {\n    dispatch({\n      type: 'CONFIRM_TASK',\n      confirm\n    })\n  },\n  getNewData(currentUser) {\n    dispatch(() =>{\n      fetch('http://localhost:3000/api/users')\n      .then(res => {\n        return res.json().then(users => {\n          dispatch({\n          type:'ADD_USERS',\n          users\n        });\n        if (currentUser) {\n        const groupUsers = users.filter(user => {\n          return user.groups[0].groupName === currentUser.groups[0].groupName;\n        })\n        dispatch({\n          type:'SET_GROUP_USERS',\n          groupUsers\n        })}\n\n      })\n      })\n    })\n  },\n  getTasksData() {\n    dispatch(() =>{\n      fetch('http://localhost:3000/api/tasks')\n      .then(res => {\n        return res.json().then(tasks => {\n        dispatch({\n          type:'ADD_TASKS',\n          tasks\n        })\n      })\n      })\n    })\n  }\n\n})\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    groupUsers: state.groupUsers,\n    tasks: state.tasks,\n    selected: state.selected,\n    currentUser: state.currentUser,\n    confirm: state.confirm\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n"]},"metadata":{},"sourceType":"module"}